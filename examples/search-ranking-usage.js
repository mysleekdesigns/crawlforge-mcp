import { SearchWebTool } from '../src/tools/search/searchWeb.js';\nimport { config, getToolConfig } from '../src/constants/config.js';\n\n/**\n * Comprehensive example demonstrating search result ranking and deduplication\n */\nclass SearchRankingDemo {\n  constructor() {\n    // Initialize SearchWebTool with ranking and deduplication enabled\n    const toolConfig = getToolConfig('search_web');\n    \n    // Note: In real usage, you would need valid Google API credentials\n    this.searchTool = new SearchWebTool({\n      apiKey: process.env.GOOGLE_API_KEY || 'demo-key',\n      searchEngineId: process.env.GOOGLE_SEARCH_ENGINE_ID || 'demo-engine',\n      ...toolConfig\n    });\n  }\n\n  /**\n   * Basic search with default ranking and deduplication\n   */\n  async basicSearch() {\n    console.log('\\nüîç Basic Search with Ranking & Deduplication');\n    console.log('=' .repeat(50));\n    \n    try {\n      const results = await this.searchTool.execute({\n        query: 'JavaScript programming tutorial',\n        limit: 20,\n        enable_ranking: true,\n        enable_deduplication: true\n      });\n      \n      console.log(`üìä Search Results: ${results.results.length} results`);\n      console.log(`üîÑ Deduplication: ${results.processing.deduplication?.duplicatesRemoved || 0} duplicates removed`);\n      console.log(`üìà Ranking: Applied to ${results.processing.ranking?.totalResults || 0} results`);\n      \n      // Show top 3 results\n      results.results.slice(0, 3).forEach((result, index) => {\n        console.log(`\\n${index + 1}. ${result.title}`);\n        console.log(`   URL: ${result.link}`);\n        console.log(`   Score: ${result.finalScore?.toFixed(3) || 'N/A'}`);\n        console.log(`   Snippet: ${result.snippet.substring(0, 100)}...`);\n      });\n      \n    } catch (error) {\n      console.error('‚ùå Basic search failed:', error.message);\n    }\n  }\n\n  /**\n   * Advanced search with custom ranking weights\n   */\n  async customRankingSearch() {\n    console.log('\\nüéØ Custom Ranking Weights');\n    console.log('=' .repeat(50));\n    \n    try {\n      const results = await this.searchTool.execute({\n        query: 'machine learning python',\n        limit: 15,\n        enable_ranking: true,\n        ranking_weights: {\n          bm25: 0.5,        // Higher emphasis on keyword matching\n          semantic: 0.2,    // Lower semantic similarity\n          authority: 0.25,  // Moderate domain authority\n          freshness: 0.05   // Lower freshness importance\n        },\n        include_ranking_details: true,\n        enable_deduplication: true\n      });\n      \n      console.log(`üìä Results: ${results.results.length}`);\n      console.log(`‚öñÔ∏è  Custom weights applied:`);\n      console.log(`   - BM25 (keyword): 50%`);\n      console.log(`   - Semantic: 20%`);\n      console.log(`   - Authority: 25%`);\n      console.log(`   - Freshness: 5%`);\n      \n      // Show detailed ranking information for top result\n      if (results.results.length > 0 && results.results[0].rankingDetails) {\n        const topResult = results.results[0];\n        const scores = topResult.rankingDetails.scores;\n        \n        console.log(`\\nü•á Top Result Breakdown:`);\n        console.log(`   Title: ${topResult.title}`);\n        console.log(`   Final Score: ${topResult.finalScore.toFixed(3)}`);\n        console.log(`   Component Scores:`);\n        console.log(`     - BM25: ${scores.bm25.toFixed(3)}`);\n        console.log(`     - Semantic: ${scores.semantic.toFixed(3)}`);\n        console.log(`     - Authority: ${scores.authority.toFixed(3)}`);\n        console.log(`     - Freshness: ${scores.freshness.toFixed(3)}`);\n        console.log(`   Rank Change: ${topResult.rankingDetails.rankChange > 0 ? '+' : ''}${topResult.rankingDetails.rankChange}`);\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Custom ranking search failed:', error.message);\n    }\n  }\n\n  /**\n   * Deduplication focused search with custom thresholds\n   */\n  async deduplicationFocusedSearch() {\n    console.log('\\nüîÑ Custom Deduplication Thresholds');\n    console.log('=' .repeat(50));\n    \n    try {\n      const results = await this.searchTool.execute({\n        query: 'React hooks useState useEffect',\n        limit: 25,\n        enable_ranking: true,\n        enable_deduplication: true,\n        deduplication_thresholds: {\n          url: 0.9,         // Very strict URL similarity\n          title: 0.8,       // Strict title similarity\n          content: 0.6,     // Moderate content similarity\n          combined: 0.7     // High combined threshold\n        },\n        include_deduplication_details: true\n      });\n      \n      console.log(`üìä Results: ${results.results.length}`);\n      \n      if (results.processing.deduplication) {\n        const dedup = results.processing.deduplication;\n        console.log(`üîÑ Deduplication Summary:`);\n        console.log(`   Original results: ${dedup.originalCount}`);\n        console.log(`   Final results: ${dedup.finalCount}`);\n        console.log(`   Duplicates removed: ${dedup.duplicatesRemoved}`);\n        console.log(`   Deduplication rate: ${dedup.deduplicationRate}`);\n      }\n      \n      // Show results that had duplicates merged\n      const mergedResults = results.results.filter(r => \n        r.deduplicationInfo && r.deduplicationInfo.merged\n      );\n      \n      if (mergedResults.length > 0) {\n        console.log(`\\nüîó Merged Results (${mergedResults.length}):`);\n        mergedResults.slice(0, 3).forEach((result, index) => {\n          console.log(`   ${index + 1}. ${result.title}`);\n          console.log(`      Primary: ${result.link}`);\n          if (result.deduplicationInfo.duplicateUrls) {\n            console.log(`      Merged: ${result.deduplicationInfo.duplicateUrls.length} duplicates`);\n            result.deduplicationInfo.duplicateUrls.slice(0, 2).forEach(url => {\n              console.log(`        - ${url}`);\n            });\n          }\n        });\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Deduplication search failed:', error.message);\n    }\n  }\n\n  /**\n   * Authority-focused search (prefer high-authority domains)\n   */\n  async authorityFocusedSearch() {\n    console.log('\\nüèõÔ∏è  Authority-Focused Search');\n    console.log('=' .repeat(50));\n    \n    try {\n      const results = await this.searchTool.execute({\n        query: 'web security best practices',\n        limit: 15,\n        enable_ranking: true,\n        ranking_weights: {\n          bm25: 0.2,        // Lower keyword importance\n          semantic: 0.15,   // Lower semantic importance\n          authority: 0.6,   // High authority emphasis\n          freshness: 0.05   // Some freshness consideration\n        },\n        enable_deduplication: true,\n        include_ranking_details: true\n      });\n      \n      console.log(`üìä Results prioritizing domain authority: ${results.results.length}`);\n      \n      // Show top results with authority scores\n      console.log(`\\nüèÜ Top Authority Results:`);\n      results.results.slice(0, 5).forEach((result, index) => {\n        const authorityScore = result.rankingDetails?.scores?.authority || 0;\n        const domain = new URL(result.link).hostname;\n        \n        console.log(`   ${index + 1}. ${domain}`);\n        console.log(`      Title: ${result.title.substring(0, 60)}...`);\n        console.log(`      Authority Score: ${authorityScore.toFixed(3)}`);\n        console.log(`      Final Score: ${result.finalScore.toFixed(3)}`);\n      });\n      \n    } catch (error) {\n      console.error('‚ùå Authority-focused search failed:', error.message);\n    }\n  }\n\n  /**\n   * Freshness-focused search (prefer recent content)\n   */\n  async freshnessFocusedSearch() {\n    console.log('\\nüìÖ Freshness-Focused Search');\n    console.log('=' .repeat(50));\n    \n    try {\n      const results = await this.searchTool.execute({\n        query: 'Node.js 2024 features updates',\n        limit: 12,\n        time_range: 'year', // Recent content from search API\n        enable_ranking: true,\n        ranking_weights: {\n          bm25: 0.3,        // Moderate keyword importance\n          semantic: 0.2,    // Moderate semantic importance\n          authority: 0.1,   // Lower authority emphasis\n          freshness: 0.4    // High freshness emphasis\n        },\n        enable_deduplication: true,\n        include_ranking_details: true\n      });\n      \n      console.log(`üìä Results prioritizing freshness: ${results.results.length}`);\n      \n      // Show results with freshness information\n      console.log(`\\nüÜï Fresh Content Results:`);\n      results.results.slice(0, 4).forEach((result, index) => {\n        const freshnessScore = result.rankingDetails?.scores?.freshness || 0;\n        const publishDate = result.pagemap?.metatags?.publishedTime || 'Unknown';\n        \n        console.log(`   ${index + 1}. ${result.title.substring(0, 50)}...`);\n        console.log(`      Published: ${publishDate}`);\n        console.log(`      Freshness Score: ${freshnessScore.toFixed(3)}`);\n        console.log(`      Final Score: ${result.finalScore.toFixed(3)}`);\n      });\n      \n    } catch (error) {\n      console.error('‚ùå Freshness-focused search failed:', error.message);\n    }\n  }\n\n  /**\n   * Comparison: With vs Without Ranking/Deduplication\n   */\n  async comparisonDemo() {\n    console.log('\\n‚öñÔ∏è  Comparison: Enhanced vs Basic Search');\n    console.log('=' .repeat(50));\n    \n    const query = 'JavaScript array methods tutorial';\n    const limit = 15;\n    \n    try {\n      // Basic search (no ranking/deduplication)\n      console.log('\\nüìä Basic Search (Original Order):');\n      const basicResults = await this.searchTool.execute({\n        query,\n        limit,\n        enable_ranking: false,\n        enable_deduplication: false\n      });\n      \n      console.log(`   Results: ${basicResults.results.length}`);\n      basicResults.results.slice(0, 3).forEach((result, index) => {\n        console.log(`   ${index + 1}. ${result.title}`);\n        console.log(`      ${new URL(result.link).hostname}`);\n      });\n      \n      // Enhanced search (with ranking/deduplication)\n      console.log('\\nüöÄ Enhanced Search (Ranked & Deduplicated):');\n      const enhancedResults = await this.searchTool.execute({\n        query,\n        limit,\n        enable_ranking: true,\n        enable_deduplication: true,\n        include_ranking_details: true\n      });\n      \n      console.log(`   Results: ${enhancedResults.results.length}`);\n      if (enhancedResults.processing.deduplication) {\n        console.log(`   Duplicates removed: ${enhancedResults.processing.deduplication.duplicatesRemoved}`);\n      }\n      \n      enhancedResults.results.slice(0, 3).forEach((result, index) => {\n        const rankChange = result.rankingDetails?.rankChange || 0;\n        const changeIndicator = rankChange > 0 ? '‚¨ÜÔ∏è' : rankChange < 0 ? '‚¨áÔ∏è' : '‚û°Ô∏è';\n        \n        console.log(`   ${index + 1}. ${result.title}`);\n        console.log(`      ${new URL(result.link).hostname}`);\n        console.log(`      Score: ${result.finalScore.toFixed(3)} ${changeIndicator} (${rankChange > 0 ? '+' : ''}${rankChange})`);\n      });\n      \n    } catch (error) {\n      console.error('‚ùå Comparison demo failed:', error.message);\n    }\n  }\n\n  /**\n   * Performance and statistics overview\n   */\n  async performanceOverview() {\n    console.log('\\nüìà Performance & Statistics Overview');\n    console.log('=' .repeat(50));\n    \n    try {\n      // Get statistics from search tool\n      const stats = this.searchTool.getStats();\n      \n      console.log('üéØ Ranking System:');\n      if (stats.rankingStats) {\n        const ranking = stats.rankingStats;\n        console.log(`   Domain Authority Entries: ${ranking.domainAuthorityEntries}`);\n        console.log(`   Current Weights:`);\n        console.log(`     - BM25: ${(ranking.configuration.weights.bm25 * 100).toFixed(1)}%`);\n        console.log(`     - Semantic: ${(ranking.configuration.weights.semantic * 100).toFixed(1)}%`);\n        console.log(`     - Authority: ${(ranking.configuration.weights.authority * 100).toFixed(1)}%`);\n        console.log(`     - Freshness: ${(ranking.configuration.weights.freshness * 100).toFixed(1)}%`);\n      }\n      \n      console.log('\\nüîÑ Deduplication System:');\n      if (stats.deduplicationStats) {\n        const dedup = stats.deduplicationStats;\n        console.log(`   Total Processed: ${dedup.totalProcessed}`);\n        console.log(`   Duplicates Found: ${dedup.duplicatesFound}`);\n        console.log(`   URL Duplicates: ${dedup.urlDuplicates}`);\n        console.log(`   Title Duplicates: ${dedup.titleDuplicates}`);\n        console.log(`   Content Duplicates: ${dedup.contentDuplicates}`);\n        console.log(`   Total Merged: ${dedup.merged}`);\n      }\n      \n      console.log('\\nüíæ Cache Performance:');\n      if (stats.cacheStats) {\n        const cache = stats.cacheStats;\n        console.log(`   Hits: ${cache.hits || 0}`);\n        console.log(`   Misses: ${cache.misses || 0}`);\n        console.log(`   Hit Rate: ${((cache.hits || 0) / ((cache.hits || 0) + (cache.misses || 0)) * 100).toFixed(1)}%`);\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Performance overview failed:', error.message);\n    }\n  }\n\n  /**\n   * Run all demonstration examples\n   */\n  async runAllDemos() {\n    console.log('üöÄ Search Ranking & Deduplication Demo');\n    console.log('='  .repeat(50));\n    console.log('This demo showcases the advanced ranking and deduplication capabilities');\n    console.log('Note: Requires valid Google API credentials for actual searches\\n');\n    \n    await this.basicSearch();\n    await this.customRankingSearch();\n    await this.deduplicationFocusedSearch();\n    await this.authorityFocusedSearch();\n    await this.freshnessFocusedSearch();\n    await this.comparisonDemo();\n    await this.performanceOverview();\n    \n    console.log('\\n‚ú® Demo completed! Check the results above for insights into');\n    console.log('   how ranking and deduplication improve search quality.');\n  }\n}\n\n// Configuration examples\nexport const rankingExamples = {\n  // Balanced ranking (default)\n  balanced: {\n    enable_ranking: true,\n    ranking_weights: {\n      bm25: 0.4,\n      semantic: 0.3,\n      authority: 0.2,\n      freshness: 0.1\n    }\n  },\n  \n  // SEO-focused (keyword heavy)\n  seoFocused: {\n    enable_ranking: true,\n    ranking_weights: {\n      bm25: 0.6,\n      semantic: 0.2,\n      authority: 0.15,\n      freshness: 0.05\n    }\n  },\n  \n  // Authority-focused (trust high-quality domains)\n  authorityFocused: {\n    enable_ranking: true,\n    ranking_weights: {\n      bm25: 0.2,\n      semantic: 0.15,\n      authority: 0.6,\n      freshness: 0.05\n    }\n  },\n  \n  // News-focused (prefer recent content)\n  newsFocused: {\n    enable_ranking: true,\n    ranking_weights: {\n      bm25: 0.3,\n      semantic: 0.2,\n      authority: 0.1,\n      freshness: 0.4\n    }\n  }\n};\n\nexport const deduplicationExamples = {\n  // Strict deduplication\n  strict: {\n    enable_deduplication: true,\n    deduplication_thresholds: {\n      url: 0.9,\n      title: 0.85,\n      content: 0.8,\n      combined: 0.75\n    }\n  },\n  \n  // Moderate deduplication (default)\n  moderate: {\n    enable_deduplication: true,\n    deduplication_thresholds: {\n      url: 0.8,\n      title: 0.75,\n      content: 0.7,\n      combined: 0.6\n    }\n  },\n  \n  // Relaxed deduplication\n  relaxed: {\n    enable_deduplication: true,\n    deduplication_thresholds: {\n      url: 0.7,\n      title: 0.65,\n      content: 0.6,\n      combined: 0.5\n    }\n  }\n};\n\n// Export demo runner\nexport async function runDemo() {\n  const demo = new SearchRankingDemo();\n  await demo.runAllDemos();\n}\n\n// Run demo if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runDemo().catch(console.error);\n}\n\nexport { SearchRankingDemo };