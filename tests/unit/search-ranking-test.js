import { ResultRanker } from '../../src/tools/search/ranking/ResultRanker.js';\nimport { ResultDeduplicator } from '../../src/tools/search/ranking/ResultDeduplicator.js';\nimport { SearchWebTool } from '../../src/tools/search/searchWeb.js';\n\n/**\n * Comprehensive test suite for search ranking and deduplication\n */\nclass SearchRankingTestSuite {\n  constructor() {\n    this.testResults = [];\n  }\n\n  async runAllTests() {\n    console.log('\\nüß™ Starting Search Ranking & Deduplication Test Suite\\n');\n    \n    // Test ResultRanker\n    await this.testResultRanker();\n    \n    // Test ResultDeduplicator\n    await this.testResultDeduplicator();\n    \n    // Test Integration\n    await this.testIntegration();\n    \n    this.printResults();\n  }\n\n  async testResultRanker() {\n    console.log('üìä Testing ResultRanker...');\n    \n    const ranker = new ResultRanker({\n      cacheEnabled: false // Disable cache for testing\n    });\n    \n    const mockResults = [\n      {\n        title: 'JavaScript Tutorial - Complete Guide',\n        snippet: 'Learn JavaScript programming language with this comprehensive tutorial...',\n        link: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript',\n        htmlSnippet: 'Learn <b>JavaScript</b> programming language...',\n        pagemap: {\n          metatags: {\n            publishedTime: '2023-01-15T10:00:00Z'\n          }\n        }\n      },\n      {\n        title: 'Python vs JavaScript Comparison',\n        snippet: 'Compare Python and JavaScript programming languages for web development...',\n        link: 'https://blog.example.com/python-vs-javascript-2024',\n        htmlSnippet: 'Compare <b>Python</b> and <b>JavaScript</b>...'\n      },\n      {\n        title: 'JavaScript Best Practices',\n        snippet: 'Essential JavaScript best practices for modern web development...',\n        link: 'https://github.com/airbnb/javascript',\n        htmlSnippet: 'Essential <b>JavaScript</b> best practices...',\n        pagemap: {\n          metatags: {\n            publishedTime: '2024-06-01T15:30:00Z'\n          }\n        }\n      }\n    ];\n    \n    try {\n      const rankedResults = await ranker.rankResults(mockResults, 'JavaScript tutorial');\n      \n      this.assert(\n        rankedResults.length === mockResults.length,\n        'ResultRanker preserves all results'\n      );\n      \n      this.assert(\n        rankedResults.every(r => r.finalScore !== undefined),\n        'ResultRanker adds finalScore to all results'\n      );\n      \n      this.assert(\n        rankedResults.every(r => r.rankingDetails !== undefined),\n        'ResultRanker adds ranking details to all results'\n      );\n      \n      // Test ranking order (should prefer exact matches and fresh content)\n      const firstResult = rankedResults[0];\n      this.assert(\n        firstResult.title.toLowerCase().includes('javascript tutorial'),\n        'ResultRanker ranks exact matches higher'\n      );\n      \n      console.log('‚úÖ ResultRanker tests passed');\n    } catch (error) {\n      console.error('‚ùå ResultRanker tests failed:', error.message);\n      this.testResults.push({ test: 'ResultRanker', status: 'failed', error: error.message });\n    }\n  }\n\n  async testResultDeduplicator() {\n    console.log('üîÑ Testing ResultDeduplicator...');\n    \n    const deduplicator = new ResultDeduplicator({\n      cacheEnabled: false // Disable cache for testing\n    });\n    \n    const mockResultsWithDuplicates = [\n      {\n        title: 'JavaScript Tutorial - MDN',\n        snippet: 'Learn JavaScript with Mozilla Developer Network...',\n        link: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript'\n      },\n      {\n        title: 'JavaScript Tutorial - MDN Web Docs',\n        snippet: 'Learn JavaScript programming with Mozilla Developer Network...',\n        link: 'https://developer.mozilla.org/en-US/docs/Web/JavaScript/'\n      },\n      {\n        title: 'Python Programming Guide',\n        snippet: 'Complete guide to Python programming language...',\n        link: 'https://python.org/tutorial'\n      },\n      {\n        title: 'JavaScript Best Practices',\n        snippet: 'Essential JavaScript best practices for developers...',\n        link: 'https://github.com/airbnb/javascript'\n      },\n      {\n        title: 'JavaScript Best Practices Guide',\n        snippet: 'Essential JavaScript best practices and patterns for developers...',\n        link: 'https://github.com/airbnb/javascript#readme'\n      }\n    ];\n    \n    try {\n      const deduplicatedResults = await deduplicator.deduplicateResults(mockResultsWithDuplicates);\n      \n      this.assert(\n        deduplicatedResults.length < mockResultsWithDuplicates.length,\n        'ResultDeduplicator removes duplicate results'\n      );\n      \n      this.assert(\n        deduplicatedResults.every(r => r.deduplicationInfo !== undefined),\n        'ResultDeduplicator adds deduplication info to all results'\n      );\n      \n      // Check that duplicates are properly identified\n      const mergedResults = deduplicatedResults.filter(r => r.deduplicationInfo.merged);\n      this.assert(\n        mergedResults.length > 0,\n        'ResultDeduplicator identifies and merges duplicates'\n      );\n      \n      console.log('‚úÖ ResultDeduplicator tests passed');\n    } catch (error) {\n      console.error('‚ùå ResultDeduplicator tests failed:', error.message);\n      this.testResults.push({ test: 'ResultDeduplicator', status: 'failed', error: error.message });\n    }\n  }\n\n  async testIntegration() {\n    console.log('üîó Testing SearchWebTool Integration...');\n    \n    try {\n      // Test schema validation with new parameters\n      const mockSearchTool = {\n        validateParams: (params) => {\n          // Simulate schema validation\n          const requiredFields = ['query'];\n          const optionalFields = [\n            'enable_ranking', 'ranking_weights', 'enable_deduplication',\n            'deduplication_thresholds', 'include_ranking_details',\n            'include_deduplication_details'\n          ];\n          \n          for (const field of requiredFields) {\n            if (!params[field]) {\n              throw new Error(`Missing required field: ${field}`);\n            }\n          }\n          \n          return true;\n        }\n      };\n      \n      // Test parameter validation\n      const validParams = {\n        query: 'JavaScript tutorial',\n        enable_ranking: true,\n        ranking_weights: {\n          bm25: 0.5,\n          semantic: 0.3,\n          authority: 0.2,\n          freshness: 0.0\n        },\n        enable_deduplication: true,\n        deduplication_thresholds: {\n          url: 0.8,\n          title: 0.7,\n          content: 0.6,\n          combined: 0.5\n        },\n        include_ranking_details: true,\n        include_deduplication_details: true\n      };\n      \n      this.assert(\n        mockSearchTool.validateParams(validParams),\n        'SearchWebTool accepts new ranking and deduplication parameters'\n      );\n      \n      // Test weight normalization\n      const ranker = new ResultRanker();\n      ranker.updateWeights({ bm25: 0.6, semantic: 0.4 }); // Should auto-normalize\n      \n      const weights = ranker.options.weights;\n      const totalWeight = Object.values(weights).reduce((sum, w) => sum + w, 0);\n      \n      this.assert(\n        Math.abs(totalWeight - 1.0) < 0.001,\n        'Ranking weights are properly normalized to sum to 1.0'\n      );\n      \n      console.log('‚úÖ Integration tests passed');\n    } catch (error) {\n      console.error('‚ùå Integration tests failed:', error.message);\n      this.testResults.push({ test: 'Integration', status: 'failed', error: error.message });\n    }\n  }\n\n  assert(condition, message) {\n    if (condition) {\n      this.testResults.push({ test: message, status: 'passed' });\n    } else {\n      this.testResults.push({ test: message, status: 'failed' });\n      throw new Error(`Assertion failed: ${message}`);\n    }\n  }\n\n  printResults() {\n    console.log('\\nüìã Test Results Summary:');\n    console.log('=' .repeat(50));\n    \n    const passed = this.testResults.filter(r => r.status === 'passed').length;\n    const failed = this.testResults.filter(r => r.status === 'failed').length;\n    \n    console.log(`‚úÖ Passed: ${passed}`);\n    console.log(`‚ùå Failed: ${failed}`);\n    console.log(`üìä Total: ${this.testResults.length}`);\n    \n    if (failed > 0) {\n      console.log('\\n‚ùå Failed Tests:');\n      this.testResults\n        .filter(r => r.status === 'failed')\n        .forEach(r => console.log(`   - ${r.test}${r.error ? ': ' + r.error : ''}`));\n    }\n    \n    console.log('\\n' + '='.repeat(50));\n  }\n}\n\n// Performance benchmarking\nclass PerformanceBenchmark {\n  static async benchmarkRanking() {\n    console.log('\\n‚ö° Performance Benchmark: Ranking');\n    \n    const ranker = new ResultRanker({ cacheEnabled: false });\n    const resultSizes = [10, 50, 100, 500];\n    \n    for (const size of resultSizes) {\n      const mockResults = this.generateMockResults(size);\n      \n      const startTime = performance.now();\n      await ranker.rankResults(mockResults, 'test query');\n      const endTime = performance.now();\n      \n      const duration = (endTime - startTime).toFixed(2);\n      console.log(`   üìä ${size} results: ${duration}ms`);\n    }\n  }\n\n  static async benchmarkDeduplication() {\n    console.log('\\n‚ö° Performance Benchmark: Deduplication');\n    \n    const deduplicator = new ResultDeduplicator({ cacheEnabled: false });\n    const resultSizes = [10, 50, 100, 500];\n    \n    for (const size of resultSizes) {\n      const mockResults = this.generateMockResultsWithDuplicates(size);\n      \n      const startTime = performance.now();\n      await deduplicator.deduplicateResults(mockResults);\n      const endTime = performance.now();\n      \n      const duration = (endTime - startTime).toFixed(2);\n      console.log(`   üîÑ ${size} results: ${duration}ms`);\n    }\n  }\n\n  static generateMockResults(count) {\n    const results = [];\n    for (let i = 0; i < count; i++) {\n      results.push({\n        title: `Result Title ${i + 1}`,\n        snippet: `This is a mock result snippet for result number ${i + 1} containing various keywords...`,\n        link: `https://example${i % 10}.com/page-${i + 1}`,\n        htmlSnippet: `This is a mock <b>result</b> snippet for result number ${i + 1}...`\n      });\n    }\n    return results;\n  }\n\n  static generateMockResultsWithDuplicates(count) {\n    const results = this.generateMockResults(Math.floor(count * 0.7));\n    \n    // Add some duplicates (slight variations)\n    const duplicateCount = Math.floor(count * 0.3);\n    for (let i = 0; i < duplicateCount; i++) {\n      const original = results[i % results.length];\n      results.push({\n        title: original.title + ' - Duplicate',\n        snippet: original.snippet.replace('mock', 'sample'),\n        link: original.link + '?duplicate=true',\n        htmlSnippet: original.htmlSnippet\n      });\n    }\n    \n    return results;\n  }\n}\n\n// Export test runner\nexport async function runTests() {\n  const testSuite = new SearchRankingTestSuite();\n  await testSuite.runAllTests();\n  \n  await PerformanceBenchmark.benchmarkRanking();\n  await PerformanceBenchmark.benchmarkDeduplication();\n}\n\n// Run tests if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runTests().catch(console.error);\n}\n\nexport { SearchRankingTestSuite, PerformanceBenchmark };